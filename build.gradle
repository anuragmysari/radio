plugins {
	id 'org.springframework.boot' version '2.4.0'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'eclipse'
	id 'jacoco'
}

group = 'com.mysari'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.4'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation "io.springfox:springfox-boot-starter:3.0.0"
    compile "io.springfox:springfox-swagger-ui:3.0.0"
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/jacoco")
}

test {
    finalizedBy jacocoTestReport
}

test {
	useJUnitPlatform()
}

jacocoTestReport {
   
    
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, 
            exclude: ['com/mysari/radio/RadioApplication**',
            'com/mysari/radio/dto**', 
            'com/mysari/radio/entity**', 
            'com/mysari/radio/config**', 
            'com/mysari/radio/mapper**'])
        })
    }
     build.dependsOn test
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      element = 'CLASS'      
      limit {
        minimum = 1
      }
      excludes = [
        	'com/mysari/radio/RadioApplication**',
            'com/mysari/radio/dto**', 
            'com/mysari/radio/entity**', 
            'com/mysari/radio/config**', 
            'com/mysari/radio/mapper**'
      ]    
    }
    rule { 
      limit {
        counter = 'INSTRUCTIONS' 
        value = 'MISSEDRATIO'
        minimum = 0.3 
      } 
    }
  }
}
